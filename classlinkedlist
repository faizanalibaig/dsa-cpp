//linkedlist
#include <iostream>
using namespace std;

class Node{
    private:
      int data;
      Node* prev;
      Node* next;
    
    public:
      Node(int data){
          this->data=data;
          this->prev=NULL;
          this->next=NULL;
      }
      
    int getData() const{
         return data;
     } 
     
     void setData(int data){
         this->data=data;
     } 
     
     Node* getPrev() const{
         return prev;
     }
     
     void setPrev (Node* prev){
         this->prev=prev;
     } 
     
    Node* getNext() const{
         return next;
     }
     
     void setNext(Node* next){
         this->next=next;
     } 
     
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoublyLinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    Node* getHead() const {
        return head;
    }

    void setHead(Node* head) {
        this->head = head;
    }

    Node* getTail() const {
        return tail;
    }

    void setTail(Node* tail) {
        this->tail = tail;
    }
    
    void AddtoHead(int data){
        Node* node=new Node(data);
        node->setNext(head);
        if(head!=NULL){
            head->setPrev(node);
        }
        head=node;
        if (tail == nullptr) {
            tail = node;
        }
    }
    
    void Forward() const{
        Node* temp=head;
        while(temp!=NULL){
            cout<<temp->getData()<<endl;
            temp=temp->getNext();
        }
    }
    
    void Backward() const{
        Node* temp=tail;
        while(temp!=NULL){
            cout<<temp->getData()<<endl;
            temp=temp->getPrev();
        }
    }
    
  void PositionEntry(int position, int data) {
    Node* temp = head;
    
    int count = 1;
    while (count<position-1) {
        temp = temp->getNext();
        count++;
    }

    Node* node = new Node(data);
    node->setNext(temp->getNext());
    node->setPrev(temp); 
    if (temp->getNext() != nullptr) {
        temp->getNext()->setPrev(node);  
    }
    temp->setNext(node);
  }
  
  void Delete(int position){
      Node* temp=head;
      int count=1;
      while(count<position-1){
          temp=temp->getNext();
          count++;
      }
      
      if(temp==NULL){
           cout << "Position out of bounds" << endl;
           return;
      }
      
      if (temp->getPrev() != nullptr) {
        temp->getPrev()->setNext(temp->getNext());
    } else {
        head = temp->getNext();
    }

    if (temp->getNext() != nullptr) {
        temp->getNext()->setPrev(temp->getPrev());
    } else {
        tail = temp->getPrev();
    }

    delete temp;
  }

};

int main() {
    DoublyLinkedList dll;
    
    dll.AddtoHead(10);
    dll.AddtoHead(20);
    dll.AddtoHead(30);
    dll.PositionEntry(3,100);
    dll.Delete(2);
    dll.Forward();

    return 0;
}
