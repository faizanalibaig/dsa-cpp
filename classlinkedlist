#include <iostream>
using namespace std;

class Node {
private:
    int data;
    Node* next;
    Node* prev;

public:
    Node(int data) {
        this->data = data;
        this->next = nullptr;
        this->prev = nullptr;
    }

    int getData() const {
        return data;
    }

    void setData(int data) {
        this->data = data;
    }

    Node* getNext() const {
        return next;
    }

    void setNext(Node* next) {
        this->next = next;
    }

    Node* getPrev() const {
        return prev;
    }

    void setPrev(Node* prev) {
        this->prev = prev;
    }
};

class DoublyLinkedList {
private:
    Node* head;
    Node* tail;

public:
    DoublyLinkedList() {
        head = nullptr;
        tail = nullptr;
    }

    Node* getHead() const {
        return head;
    }

    void setHead(Node* head) {
        this->head = head;
    }

    Node* getTail() const {
        return tail;
    }

    void setTail(Node* tail) {
        this->tail = tail;
    }

    void AddToHead(int data) {
        Node* node = new Node(data);
        node->setNext(head);
        if (head != nullptr) {
            head->setPrev(node);
        }
        head = node;
        if (tail == nullptr) {
            tail = node;
        }
    }

    void printForward() const {
        Node* temp = head;
        while (temp != nullptr) {
            cout << temp->getData() << endl;
            temp = temp->getNext();
        }
    }

    void printBackward() const {
        Node* temp = tail;
        while (temp != nullptr) {
            cout << temp->getData() << endl;
            temp = temp->getPrev();
        }
    }
};

int main() {
    DoublyLinkedList dll;

    dll.AddToHead(10);
    dll.AddToHead(20);
    dll.AddToHead(30);
    dll.AddToHead(40);

    cout << "Printing forward:" << endl;
    dll.printForward();

    cout << "Printing backward:" << endl;
    dll.printBackward();

    return 0;
}
