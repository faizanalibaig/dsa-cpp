#include <iostream>
using namespace std;
#define n 1000

template <class T>
class stack{
   T arr[n];
   int top;

 public:
   stack(){
     top=-1;
   }

   void push(T x); // Corrected parameter type
   void pop();
   T& TopElement(); // Corrected return type
   bool empty(); // Corrected return type
   bool full(); // Corrected return type
};

template <class T>
void stack<T>::push(T x){ // Corrected parameter type
 if(top==n-1){
    cout<<"Stack overflow";
    return;
 }

 top++;
 arr[top]=x;
}

template <class T>
void stack<T>::pop(){
 if(top==-1){
    cout<<"Stack underflow";
    return;
 }

 top--;
}

template <class T>
T& stack<T>::TopElement(){ // Corrected return type
    if(top==-1){
      cout<<"Stack underflow";
      return arr[0]; // Return a reference to the first element as a placeholder
    }

 return arr[top];
}

template <class T>
bool stack<T>::empty(){ // Corrected return type
 return top==-1;
}

template <class T>
bool stack<T>::full(){ // Corrected return type
 return top==n-1;
}

int main() {
    stack<int> stk;
    stk.push(10); 
    stk.push(20);
    stk.push(30);
    stk.push(40);

    stack<int> stk1=stk;

   while(!stk1.empty() && !stk1.full()){
      cout<<stk1.TopElement() <<" ";
      stk1.pop();
     }

 char c;
 cout<<"Enter a characters: ";
 stack<char> sc;

   while(cin.get(c) && c!='\n' && !sc.full() && c != '.'){
       sc.push(c);
   }

 while(!sc.empty() && !sc.full()){
    cout<<sc.TopElement();
    sc.pop();
 }
}
